---
- name: Install packages apt
  apt:
    name:
      - net-tools
      - apt-transport-https
      - gnupg
      - gnupg2
      - software-properties-common
      - mc
      - htop
      - vim
      - git
      - bash-completion
      - nfs-common
      - python3-apt
      - tar
      - rsyslog
      - chrony
      - jq
      - ca-certificates
      - curl
    state: latest
  when: ansible_facts['os_family'] == "Debian"

- name: Add repo kubernetes for Centos
  when: ansible_facts['os_family'] == "RedHat"
  yum_repository:
    name: kubernetes
    description: 'Base programs for k8s'
    baseurl: 'https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64'
    gpgcheck: yes
    gpgkey: 
      - 'https://packages.cloud.google.com/yum/doc/yum-key.gpg'
      - 'https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg'

- name: Docker repository for containerd Redhat
  when: ansible_facts['os_family'] == "RedHat"
  yum_repository:
    name: docker
    enabled: yes
    baseurl: "https://download.docker.com/linux/centos/$releasever/$basearch/stable"
    description: 'Docker'
    gpgcheck: yes
    gpgkey:
      - 'https://download.docker.com/linux/centos/gpg'

- name: Add google cloud GPG key
  when: ansible_facts['os_family'] == "Debian"
  apt_key:
    url: "https://packages.cloud.google.com/apt/doc/apt-key.gpg"
    state: present

- name: Add kubernetes repository
  when: ansible_facts['os_family'] == "Debian"
  apt_repository:
    repo: "deb https://apt.kubernetes.io/ kubernetes-xenial main"
    state: present
    filename: kubernetes
    update_cache: yes

- name: Add docker GPG key
  when: ansible_facts['os_family'] == "Debian"
  apt_key:
    url: "https://download.docker.com/linux/debian/gpg"
    state: present
    
- name: Add docker repository
  when: ansible_facts['os_family'] == "Debian"
  apt_repository:
    repo: "deb https://download.docker.com/linux/debian bullseye stable"
    state: present
    filename: docker
    update_cache: yes

- name: Install packages dnf
  dnf:
    name:
      - net-tools
      - mc
      - iproute-tc
      - vim
      - git
      - bash-completion
      - nfs-utils
      - python3
      - tar
      - rsyslog
      - chrony
      - containerd
      - jq
      - kubectl-{{ kube_version }}-0.x86_64
      - kubelet-{{ kube_version }}-0.x86_64
      - kubeadm-{{ kube_version }}-0.x86_64
    state: latest
  when: ansible_facts['os_family'] == "RedHat"

- name: Install packages kube utilites and containerd
  when: ansible_facts['os_family'] == "Debian"
  apt:
    name:
      - containerd.io
      - kubectl
      - kubelet
      - kubeadm
    state: latest

- name: Enable NTP server
  service:
    name: chronyd
    state: started
    enabled: yes

- name: Enable rsyslog
  service:
    name: rsyslog
    state: started
    enabled: yes

- name: Disable firewalld
  when: ansible_facts['os_family'] == "RedHat"
  service:
    name: firewalld
    state: stopped
    enabled: no

- name: Check is swap enable
  shell: swapon
  register: swap_present
  changed_when: false
  ignore_errors: true

- name: If swap is enabled - disable it
  shell: swapoff -a
  when: swap_present.stdout != ""

- name: Disable SWAP in fstab
  replace:
    path: /etc/fstab
    regexp: '^([^#].*\s*swap\s*.*)$'
    replace: '# \1'

- name: Check Disable SELinux
  when: ansible_facts['os_family'] == "RedHat"
  selinux:
    state: disabled
  register: selinux_ret

# - name: Disable SELinux
#   shell: setenforce 0
#   when: selinux_ret.reboot_required

- name: Remove containerd config.toml 
  when: ansible_facts['os_family'] == "RedHat"
  file:
    path: /etc/containerd/config.toml
    state: absent 

- name: Runc enable in containerd
  when: ansible_facts['os_family'] == "Debian"
  shell: containerd config default > /etc/containerd/config.toml

- name: Runc enable
  replace:
    path: /etc/containerd/config.toml
    regexp: 'SystemdCgroup = false'
    replace: 'SystemdCgroup = true'


- name: Set crictl.yaml
  copy: 
    src: crictl.yaml
    dest: /etc/crictl.yaml
    owner: root
    mode: 644

- name: Containerd
  service:
    name: containerd
    state: restarted
    enabled: yes

- name: Load modules
  modprobe:
    name: br_netfilter

- name: Load modules
  modprobe:
    name: overlay

- name: Load module permanet
  copy:
    src: modules-kubernetes.conf
    dest: /etc/modules-load.d/modules-kubernetes.conf

- name: Set Sysctl on all nodes
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    - name: net.ipv4.ip_forward
      value: 1
    - name: net.bridge.bridge-nf-call-iptables
      value: 1
    - name: net.bridge.bridge-nf-call-ip6tables
      value: 1
    - name: vm.max_map_count # for opensearch & elasticserarch
      value: 262144

- name: Set Sysctl on master node(s)
  when: inventory_hostname in groups['k8s_masters']
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    - name: net.ipv4.ip_nonlocal_bind
      value: 1

- name: Add kubectl completion bash
  blockinfile:
    path: /root/.bashrc
    block: |
      source <(kubectl completion bash)
      alias k=kubectl
      complete -o default -F __start_kubectl k